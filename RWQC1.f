!
!**********************************************************************C
!**********************************************************************C
!**********************************************************************C
!
      SUBROUTINE RWQC1(IWQDT)
!
!**********************************************************************C
!
! **  MODIFIED BY J.S. ON 5/5/98 TO ADD A MACALGAL.
!
! **  LAST MODIFIED BY JOHN HAMRICK AND MIKE MORTON ON 8 AUGUST 2001
!
! **  THIS SUBROUTINE IS PART OF  EFDC-FULL VERSION 1.0a 
!
! **  LAST MODIFIED BY JOHN HAMRICK ON 1 NOVEMBER 2001
!
!----------------------------------------------------------------------C
!
! CHANGE RECORD
! DATE MODIFIED     BY                 DATE APPROVED    BY
!
!----------------------------------------------------------------------C
!
! hugo rodriguez  10/2010  algae chla/C time variable in algae kinetic file
!
!**********************************************************************C
!
! READ IN FROM THE UNIT #8
!: I/O CONTROL VARIABLES
!: SPATIALLY AND TEMPORALLY CONSTANT REAL PARAMETERS
!
!**********************************************************************C
!
      INCLUDE 'EFDC.PAR'
      INCLUDE 'EFDC.CMN'
!
      PARAMETER (CONV1=1.0E3,CONV2=8.64E4)

      DIMENSION XPSL(NWQVM),XDSL(NWQVM)
      INTEGER ISSKIP
      CHARACTER TITLE(5)*79, CCMRM*1
!     CHARACTER TITLE(5)*79, RSTOFN*50
!      CHARACTER*50 ICIFN,AGRFN,STLFN,SUNFN,BENFN,PSLFN,NPLFN,NCOFN
!      CHARACTER TITLE(3)*79
!
      OPEN(2,FILE='WQ3D.OUT',STATUS='UNKNOWN',POSITION='APPEND')
!
      OPEN(1,FILE='WQ3DWC.INP',STATUS='UNKNOWN')
!
! READ FIRST LINE IN WQ3DWC.INP FILE.  IF FIRST CHARACTER IS '#', THEN
! THIS IS THE NEW VERSION WITH ANNOTATED COMMENTS ADDED (I.E., USES THE
! SKIPCOMM SUBROUTINE TO SKIP COMMENT LINES.  COMMENT LINES BEGIN WITH
! A "C", "C", OR "#" CHARACTER IN COLUMN 1.  IF "#" IS NOT FOUND AS THE
! FIRST CHARACTER IN THE FILE, THEN THE OLD METHOD OF READING THE
! WQ3DWC.INP FILE IS USED TO PRESERVE BACKWARD COMPATABILITY.
!
      ISSKIP = 0
      READ(1,'(A1)') CCMRM
      BACKSPACE(1)
      IF(CCMRM .EQ. '#') ISSKIP = 1
      CCMRM = '#'
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) (TITLE(M), M=1,3)
      WRITE(2,90) (TITLE(M), M=1,3)

! I/O CONTROL VARIABLES

!      READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) ISWQLVL,NWQV,NWQZ,NWQPS,NWQTD,NWQTS,NTSWQV,NSMG,NSMZ,NTSSMV,NSMTS,NWQKDPT
      WRITE(2,*) ISWQLVL,NWQV,NWQZ,NWQPS,NWQTD,NWQTS,NTSWQV,NSMG,NSMZ,NTSSMV,NSMTS,NWQKDPT
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) (ISTRWQ(NV),NV=1,NWQV)
      WRITE(2,*) (ISTRWQ(NV),NV=1,NWQV)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) IWQDT,IWQM,IWQBEN,IWQSI,IWQFCB,IWQSRP,IWQSTOX,IWQKA(1), IWQVLIM
      WRITE(2,*) IWQDT,IWQM,IWQBEN,IWQSI,IWQFCB,IWQSRP,IWQSTOX,IWQKA(1), IWQVLIM
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
!4
! MODIFIED BY J.S.
!
      READ(1,*) IWQZ,IWQNC,IWQRST,NDMWQ,LDMWQ,NDDOAVG,NDLTAVG,IDNOTRVA
      WRITE(2,*) IWQZ,IWQNC,IWQRST,NDMWQ,LDMWQ,NDDOAVG,NDLTAVG,IDNOTRVA
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) IWQICI,IWQAGR,IWQSTL,IWQSUN,IWQPSL,IWQNPL, ISDIURDO,WQDIUDT, IWQKIN
      WRITE(2,*) IWQICI,IWQAGR,IWQSTL,IWQSUN,IWQPSL,IWQNPL, ISDIURDO,WQDIUDT, IWQKIN
!     &          ISDIURDO,  ISDIUDIA, ICDIA, JCDIA
!     ISDIURDO > 0 TURNS ON DIURNAL DO OUTPUT TO BINARY FILE
!     WQDIUDT = TIME INTERVAL FOR WRITING TO DIURNAL DO FILE (HOURS)
!
      IWQDIUDT = NINT(WQDIUDT*3600.0/DT)
      WRITE(2,83)': FREQUENCY OF DIURNAL DO OUTPUT (IN DT UNIT) =',IWQDIUDT
!
      WRITE(2,83)'* IWQDT (DTWQ(D) = DT(S)*IWQDT/86400)        = ',IWQDT
      DTD = DT/86400.0
	IF(ITIMSOL.EQ.0)THEN
!        DTWQ = DTD*REAL(IWQDT)*REAL(NWQKDPT)
        DTWQ = 2.*DTD*REAL(NWQKDPT)
	  IF(IWQDT.EQ.1) WRITE(6,*)'IWQDT RESET TO 2 FOR 3TL HYDRO'
        DTWQO2 = DTWQ*0.5
	ENDIF
	IF(ITIMSOL.EQ.1)THEN
!        DTWQ = DTD*REAL(IWQDT)*REAL(NWQKDPT)
        DTWQ = DTD*REAL(NWQKDPT)
	  IF(IWQDT.EQ.2) WRITE(6,*)'IWQDT RESET TO 1 FOR 2TL HYDRO'
        DTWQO2 = DTWQ*0.5
	ENDIF
!
      IF(IWQM.EQ.1)THEN
        WRITE(2,80)'* FULL VERSION WITH 21 VARIABLES IS ACTIVATED     '
       ELSE IF(IWQM.EQ.2)THEN
        WRITE(2,80)'* SMALL VERSION WITH 9 VARIABLES IS ACTIVATED     '
       ELSE
        STOP '** ERROR!!! INVALID IWQM VALUE **'
      ENDIF
!
      IF(IWQBEN.EQ.1)THEN
        WRITE(2,80)'* SEDIMENT PROCESS MODEL IS ACTIVATED             '
       ELSE IF(IWQBEN.EQ.0)THEN
        WRITE(2,80)'* SPATIALLY/TEMPORALLY CONSTANT BF IS SPECIFIED   '
       ELSE IF(IWQBEN.EQ.2)THEN
        WRITE(2,80)'* SPATIALLY AND/OR TEMPORALLY-VARYING BF SPECIFIED'
       ELSE
        STOP '** ERROR!!! INVALID IWQBEN VALUE **'
      ENDIF
!
      IF(IWQSI.EQ.1)THEN
        WRITE(2,80)'* SILICA STATE VARIABLES (SU & SA) ARE MODELED    '
        IF(IWQM.EQ.2) STOP '** ERROR!!! INCOMPATIBLE IWQM & IWQSI'
       ELSE
        WRITE(2,80)'* NO SILICA (SU & SU) LIMITATION                  '
      ENDIF
!
      IF(IWQFCB.EQ.1)THEN
        WRITE(2,80)'* FCB (FECAL COLIFORM BACTERIA) IS MODELED        '
       ELSE
        WRITE(2,80)'* FCB (FECAL COLIFORM BACTERIA) IS NOT MODELED    '
      ENDIF
!
      IF(IWQSRP.EQ.1)THEN
        WRITE(2,80)'* TAM IS USED FOR SORPTION OF PO4T/SA: MODEL TAM  '
       ELSE IF(IWQSRP.EQ.2)THEN
        WRITE(2,80)'* TSS IS USED FOR SORPTION OF PO4T/SA: MODEL TSS  '
!        IF(ISTRAN(6).NE.1) STOP 'ERROR! INCOMPATIBLE ISTRAN(6)/IWQSRP'
       ELSE
        WRITE(2,80)'* NO SORPTION OF PO4T/SA: MAY MODEL TSS & NO TAM  '
      ENDIF
!
      IF(IWQSTOX.EQ.1)THEN
        WRITE(2,80)'* SALINITY TOXICITY IS APPLIED TO CYANOBACTERIA   '
       ELSE
        WRITE(2,80)'* NO SALINITY TOXICITY: SALTWATER CYANOBACTERIA   '
      ENDIF
!
      IF(IWQKA(1).EQ.0)THEN
        WRITE(2,80)'* USER-SPECIFIED CONSTANT REAERATION SET TO WQKRO '
        WRITE(2,80)'*   REAERATION DUE TO WIND SET TO ZERO            '
      ENDIF
      IF(IWQKA(1).EQ.1)THEN
        WRITE(2,80)'* USER-SPECIFIED CONSTANT REAERATION SET TO WQKRO '
        WRITE(2,80)'*   REAERATION DUE TO WIND ADDED TO WQKRO         '
      ENDIF
      IF(IWQKA(1).EQ.2)THEN
        WRITE(2,80)'* OCONNOR-DOBBINS REAERATION FORMULA IS USED      '
      ENDIF
      IF(IWQKA(1).EQ.3)THEN
        WRITE(2,80)'* OWENS & GIBBS (1964) REAERATION FORMULA IS USED '
      ENDIF
      IF(IWQKA(1).EQ.4)THEN
        WRITE(2,80)'* MODIFIED OWENS & GIBBS REAERATION IS USED       '
      ENDIF
      IF(IWQVLIM.EQ.0)THEN
        WRITE(2,80)'* MACROALGAE GROWTH IS NOT LIMITED BY VELOCITY    '
      ENDIF
      IF(IWQVLIM.EQ.1)THEN
        WRITE(2,80)'* MACROALGAE VELOCITY LIMIT, MICHAELIS-MENTON EQU.'
      ENDIF
      IF(IWQVLIM.EQ.2)THEN
        WRITE(2,80)'* MACROALGAE VEL. LIMIT, 5-PARAM LOGISTIC FUNCTION'
      ENDIF
!
      WRITE(2,83)'* # OF ZONES FOR SPATIALLY VARYING PARAMETERS =',IWQZ
      IF(IWQZ.GT.NWQZ) STOP 'ERROR!! IWQZ SHOULD BE <= NWQZ'
!
      IF(IWQNC.EQ.1)THEN
        WRITE(2,80)'* WRITE NEGATIVE CONC. INFORMATION TO NEG-CONC.LOG'
       ELSE
        WRITE(2,80)'* NO WRTING OF NEGATIVE CONCENTRATION INFORMATION '
      ENDIF
!
      IF(IWQRST.EQ.1)THEN
        WRITE(2,80)'* WRITE SPATIAL DISTRIBUTIONS TO IWQORST          '
       ELSE
        WRITE(2,80)'* NO WRITING TO IWQORST                           '
      ENDIF
!
      WRITE(2,999)
!
      IF(IWQICI.EQ.1)THEN
        WRITE(2,80)'* SPATIALLY/TEMPORALLY-VARYING ICS FROM INWQICI   '
       ELSE IF(IWQICI.EQ.2)THEN
        WRITE(2,80)'* SPATIALLY/TEMPORALLY-VARYING ICS FROM INWQRST   '
       ELSE
        WRITE(2,80)'* SPATIALLY/TEMPORALLY CONSTANT INITIAL CONDITIONS'
      ENDIF
!
      IF(IWQAGR.EQ.1)THEN
        WRITE(2,80)'* SPATIALLY A/O TEMPORALLY-VARYING ALGAL KINETICS '
       ELSE
        WRITE(2,80)'* SPATIALLY/TEMPORALLY CONSTANT ALGAL KINETICS    '
      ENDIF
!
      IF(IWQSTL.EQ.1)THEN
        WRITE(2,80)'* SPATIALLY AND/OR TEMPORALLY-VARYING SETTLING VEL'
       ELSE
        WRITE(2,80)'* SPATIALLY/TEMPORALLY CONSTANT SETTLING VELOCITY '
      ENDIF
!
      IF(IWQSUN.GE.1)THEN
        WRITE(2,80)'* TEMPORALLY-VARYING IO & FD                      '
       ELSE
        WRITE(2,80)'* TEMPORALLY CONSTANT IO & FD                     '
      ENDIF
!
!11_24     IF(IWQPSL.EQ.1)THEN
!11_24        WRITE(2,80)'* TEMPORALLY-VARYING POINT SOURCE INPUT           '
!11_24       ELSE
!11_24        WRITE(2,80)'* TEMPORALLY CONSTANT POINT SOURCE INPUT          '
!11_24      ENDIF
!
      IF(IWQNPL.EQ.1)THEN
        WRITE(2,80)'* SPATIALLY AND/OR TEMPORALLY-VARYING NPS INPUT   '
       ELSE
        WRITE(2,80)'* SPATIALLY/TEMPORALLY CONSTANT NPS INPUT         '
      ENDIF
!
      IF(IWQKIN.EQ.1)THEN
        WRITE(2,80)'* SPATIALLY VARYING KINETICS FROM KINETICS.INP    '
      ELSE
        WRITE(2,80)'* FILE KINETICS.INP NOT USED                      '
      ENDIF
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) IWQTS,TWQTSB,TWQTSE,WQTSDT, ISWQAVG, ISWQMIN, ISWQMAX,ISCOMP
      WRITE(2,*) IWQTS,TWQTSB,TWQTSE,WQTSDT, ISWQAVG, ISWQMIN, ISWQMAX,ISCOMP
! ISWQAVG > 0 TURNS ON BINARY FILE OUTPUT FOR WQ DAILY AVERAGES
! ISWQMIN > 0 TURNS ON BINARY FILE OUTPUT FOR WQ DAILY MINIMUMS
! ISWQMAX > 0 TURNS ON BINARY FILE OUTPUT FOR WQ DAILY MAXIMUMS
! ISCOMP  > 0 TURNS ON BINARY FILE OUTPUT FOR DO COMPONENT ANALYSIS
      IF(ISCOMP .GT. 0)THEN
        CALL INITBIN3
      ENDIF
!
      IF(IWQTS.GT.NWQTS)THEN
        WRITE(2,80)'** IWQTS SHOULD BE <= NWQTS **                    '
        IWQTS=NWQTS
      ENDIF
!
!
      WRITE(2,84)'* TIME-SERIES OUTPUT FROM ', TWQTSB, ' DAY ',
     * '                       TO ', TWQTSE, ' DAY ',
     * '                    EVERY ', WQTSDT, ' HOUR',
     * '                       AT ', IWQTS,  ' LOCATIONS',
     * ' BIN FILE SWITCH ISWQAVG =', ISWQAVG,' (0=OFF)  ',
     * ' BIN FILE SWITCH ISWQMIN =', ISWQMIN,' (0=OFF)  ',
     * ' BIN FILE SWITCH ISWQMAX =', ISWQMAX,' (0=OFF)  ',
     * ' BIN FILE SWITCH ISCOMP  =', ISCOMP, ' (0=OFF)  '
      WRITE(2,999)
!
!7
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      DO M=1,2
        READ(1,90) TITLE(M)
      ENDDO
      IF(IWQTS.GE.1)THEN
        WRITE(2,80)': ICWQTS(I)=1, TIME-SERIES OUTPUT FOR VARIABLE I  '
        WRITE(2,80)': ICWQTS(I)\=1, NO TIME-SERIES OUTPUT FOR VAR. I  '
        WRITE(2,999)
!
        DO M=1,2
          WRITE(2,90) TITLE(M)
        ENDDO
        DO M=1,IWQTS
          READ(1,*) II,JJ,(ICWQTS(NW,M),NW=1,13)
          WRITE(2,*) II,JJ,(ICWQTS(NW,M),NW=1,13)
          READ(1,*) (ICWQTS(NW,M),NW=14,NTSWQV),ICWQTS(IDNOTRVA,M)
          WRITE(2,*) (ICWQTS(NW,M),NW=14,NTSWQV),ICWQTS(IDNOTRVA,M)
          IF(IJCT(II,JJ).LT.1 .OR. IJCT(II,JJ).GT.8)THEN
            WRITE(2,86)  II,JJ,M
            WRITE(2,80)'ERROR!! INVALID (I,J): TIME-SERIES LOCATION'
            STOP
          ENDIF
          LWQTS(M)=LIJ(II,JJ)
          WRITE(2,94) II,JJ,(ICWQTS(NW,M),NW=1,NTSWQV+1)
        ENDDO
!
      ENDIF
!
      IWQTSB = NINT(TWQTSB/DTD)
      IWQTSE = NINT(TWQTSE/DTD)
      IWQTSDT = NINT(WQTSDT*3600.0/DT)
      WRITE(2,999)
      WRITE(2,83)': TIME-SERIES STARTING TIME STEP (IN DT UNIT) =',IWQTSB
      WRITE(2,83)': TIME-SERIES ENDING TIME STEP (IN DT UNIT)   =',IWQTSE
      WRITE(2,83)': FREQUENCY OF TS OUTPUT  (IN DT UNIT)        =',IWQTSDT
      IF(MOD(IWQTSDT,IWQDT).NE.0)STOP 'ERROR!! IWQTSDT SHOULD BE MULTIPLE OF IWQDT'
!
  999 FORMAT(1X)
   90 FORMAT(A79)
   91 FORMAT(10I8)
   92 FORMAT(10F8.4)
   93 FORMAT(I8,3F8.4)
   94 FORMAT(2I5, 13I5, /, 10X, 9I5)
   80 FORMAT(A50)
   81 FORMAT(A27, 4(F8.4,2X))
   82 FORMAT((A45, F8.4))
   83 FORMAT(A47, I10)
   84 FORMAT(3(A26,F10.4,A5,/), 5(A26,I8,A10,/))
   86 FORMAT(' I,J,M = ',3I10)
!
! CONSTANT PARAMETERS FOR ALGAE (SEE TABLE 3-1)
!8
! MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQKHNC,WQKHND,WQKHNG,WQKHNM,WQKHPC,WQKHPD,WQKHPG,WQKHPM,WQKHS,WQSTOX
      WRITE(2,*) WQKHNC,WQKHND,WQKHNG,WQKHNM,WQKHPC,WQKHPD,WQKHPG,WQKHPM,WQKHS,WQSTOX
      WRITE(2,80)'* HALF-SAT. COSNTANT (G/M^3) FOR NUTRIENT UPTAKE  '
      WRITE(2,81)' : (KHNC, KHPC)          = ', WQKHNC,WQKHPC
      WRITE(2,81)' : (KHND, KHPD, KHS)     = ', WQKHND,WQKHPD,WQKHS
      WRITE(2,81)' : (KHNG, KHPG)          = ', WQKHND,WQKHPG
      WRITE(2,81)' : (KHNM, KHPM)          = ', WQKHNM,WQKHPM
      WRITE(2,82)'* SAL. WHERE MICROSYSTIS GROWTH IS HALVED  = ',WQSTOX
      WQSTOX = WQSTOX*WQSTOX
!9
!    MODIFIED BY J.S.(5/5/98)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQKETSS,WQKECHL,WQCHLC(1),WQCHLD(1),WQCHLG(1),WQCHLM,WQDOPC,WQDOPD,WQDOPG, WQDOPM(1)
      WRITE(2,*) WQKETSS,WQKECHL,WQCHLC(1),WQCHLD(1),WQCHLG(1),WQCHLM,WQDOPC,WQDOPD,WQDOPG, WQDOPM(1)
!
      IF(ISTRAN(6).NE.1)THEN
        WQKETSS=0.0
        WRITE(2,80)': SINCE TSS IS NOT MODELED, KETSS IS FORCED TO 0  '
      ENDIF
!
      WRITE(2,80)'* LIGHT EXTINC. COEFF. DUE TO TSS & CHL           '
      WRITE(2,81)' : KETSS (/M PER G/M^3)  = ', WQKETSS
      WRITE(2,81)' : KECHL (/M PER MG/M^3) = ', WQKECHL
      IF(WQKECHL .LT. 0.0)THEN
        WRITE(2,80) '* USE RILEY (1956) EQUATION FOR WQKECHL          '
        WRITE(2,80) ' : KECHL = 0.054*CHL**0.667 + 0.0088*CHL         '
      ENDIF
      WRITE(2,80)'* CARBON-TO-CHL RATIO (G C PER MG CHL)            '
      WRITE(2,81)':(CCHLC,CCHLD,CCHLG)=',WQCHLC(1),WQCHLD(1),WQCHLG(1)
      WRITE(2,80)'* DEPTH (M) OF MAXIMUM ALGAL GROWTH               '
      WRITE(2,81)' : (DOPTC, DOPTD, DOPTG) = ', WQDOPC,WQDOPD,WQDOPG
      do iz=1,iwqz
       WQCHLC(iz)=1.0/(WQCHLC(1)+ 1.E-12)                                 !hnr 10/2010
       WQCHLD(iz)=1.0/(WQCHLD(1)+ 1.E-12)                                 !hnr 10/2010
       WQCHLG(iz)=1.0/(WQCHLG(1)+ 1.E-12)                                 !hnr 10/2010
      end do
      WQCHLM=1.0/(WQCHLM+ 1.E-12)
!10
!    MODIFIED BY J.S. (5/5/98)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQI0,WQISMIN,WQFD,WQCIA,WQCIB,WQCIC,WQCIM,REAC(1),PARADJ
      WRITE(2,*) WQI0,WQISMIN,WQFD,WQCIA,WQCIB,WQCIC,WQCIM,REAC(1),PARADJ
      WRITE(2,82)'*INITIAL IO (LY/D) AT WATER SURFACE       = ',WQI0
     *          ,' MINIMUM OPTIMUM SOLAR RADIATION (LY/D)   = ',WQISMIN
     *          ,' FRACTIONAL DAYLENGTH                     = ',WQFD
     *          ,' WEIGHTING FACTOR FOR RAD. AT CURRENT DAY = ',WQCIA
     *          ,' WEIGHTING FACTOR FOR RAD. AT (-1) DAY    = ',WQCIB
     *          ,' WEIGHTING FACTOR FOR RAD. AT (-2) DAYS   = ',WQCIC
     *          ,' FRACTION OF SOLAR RADIATION THAT IS PAR  = ',PARADJ
      WQI1 = WQI0
      WQI2 = WQI0
      WQI3 = WQI0
      WQI0OPT = 0.0
      IF(IWQSUN .EQ. 2)THEN
        WQISMIN = 0.0
      ENDIF
!
!      READ(1,999)
!      READ(1,*) WQTMC,WQTMD,WQTMG,WQKG1C,WQKG2C,WQKG1D,WQKG2D,WQKG1G,
!     *  WQKG2G
!      WRITE(2,80)'* OPTIMUM TEMPERATURE FOR ALGAL GROWTH (DEGC)     '
!      WRITE(2,81)' : (TMC, TMD, TMG      ) = ', WQTMC,WQTMD,WQTMG
!      WRITE(2,80)'* SUBOPTIMAL TEMPERATURE EFFECT FOR ALGAL GROWTH  '
!      WRITE(2,81)' : (KTG1C, KTG1D, KTG1G) = ', WQKG1C,WQKG1D,WQKG1G
!      WRITE(2,80)'* SUPEROPTIMAL TEMPERATURE EFFECT FOR ALGAL GROWTH'
!      WRITE(2,81)' : (KTG2C, KTG2D, KTG2G) = ', WQKG2C,WQKG2D,WQKG2G
! MODIFIED ON 03/05/97 BY JMH/MRM:
!11 MODIFIED BY J.S.(5/5/98)
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQTMC1,WQTMC2,WQTMD1,WQTMD2,WQTMG1,WQTMG2,WQTMM1,WQTMM2,WQTMP1, WQTMP2
      WRITE(2,*)WQTMC1,WQTMC2,WQTMD1,WQTMD2,WQTMG1,WQTMG2,WQTMM1,WQTMM2,WQTMP1, WQTMP2
!12
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQKG1C,WQKG2C,WQKG1D,WQKG2D,WQKG1G,WQKG2G,WQKG1M,WQKG2M,WQKG1P, WQKG2P
      WRITE(2,*)WQKG1C,WQKG2C,WQKG1D,WQKG2D,WQKG1G,WQKG2G,WQKG1M,WQKG2M,WQKG1P, WQKG2P
      WRITE(2,80)'* LOWER OPTIMUM TEMP FOR ALGAL GROWTH (DEGC)     '
      WRITE(2,81)' : (TMC1, TMD1, TMG1   ) = ', WQTMC1,WQTMD1,WQTMG1
      WRITE(2,80)'* UPPER OPTIMUM TEMP FOR ALGAL GROWTH (DEGC)     '
      WRITE(2,81)' : (TMC2, TMD2, TMG2   ) = ', WQTMC2,WQTMD2,WQTMG2
!13
!   MODIFIED BY J.S.(5/5/98)
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQTRC,WQTRD,WQTRG,WQTRM,WQKTBC,WQKTBD,WQKTBG,WQKTBM
      WRITE(2,*) WQTRC,WQTRD,WQTRG,WQTRM,WQKTBC,WQKTBD,WQKTBG,WQKTBM
      WRITE(2,80)'* REFERENCE TEMPERATURE FOR ALGAL METABOLISM (OC) '
      WRITE(2,81)' : (TRC, TRD, TRG)       = ', WQTRC,WQTRD,WQTRG
      WRITE(2,80)'* TEMPERATURE EFFECT FOR ALGAL METABOLISM         '
      WRITE(2,81)' : (KTBC, KTBD, KTBG)    = ', WQKTBC,WQKTBD,WQKTBG
!
! CONSTANT PARAMETERS FOR CARBON (SEE TABLE 3-2)
!
!14
!   MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFCRP,WQFCLP,WQFCDP,WQFCDC,WQFCDD,WQFCDG,WQKHRC,WQKHRD,WQKHRG
      WRITE(2,*) WQFCRP,WQFCLP,WQFCDP,WQFCDC,WQFCDD,WQFCDG,WQKHRC,WQKHRD,WQKHRG
      WRITE(2,80)'* CARBON DISTRIBUTION COEFF FOR ALGAL PREDATION   '
      WRITE(2,81)' : (FCRP, FCLP, FCDP)    = ', WQFCRP,WQFCLP,WQFCDP
      WRITE(2,80)'* CARBON DISTRIBUTION COEFF FOR ALGAL METABOLISM  '
      WRITE(2,81)' : (FCDC, FCDD, FCDG)    = ', WQFCDC,WQFCDD,WQFCDG
      WRITE(2,80)'* HALF-SAT. CONSTANT (GO/M*3) FOR ALGAL DOC EXCRET'
      WRITE(2,81)' : (KHRC, KHRD, KHRG)    = ', WQKHRC,WQKHRD,WQKHRG
      CFCDCWQ = 1.0 - WQFCDC
      CFCDDWQ = 1.0 - WQFCDD
      CFCDGWQ = 1.0 - WQFCDG
      XC = ABS(1.0 - (WQFCRP+WQFCLP+WQFCDP))
      IF(XC .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FCRP+FCLP+FCDP NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
!   MODIFIED BY J.S.(5/5/98)
!
!15 
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFCRPM,WQFCLPM,WQFCDPM,WQFCDM, WQKHRM(1)
      WRITE(2,*) WQFCRPM,WQFCLPM,WQFCDPM,WQFCDM, WQKHRM(1)
!16
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQKRC,WQKLC,WQKDC(1),WQKRCALG,WQKLCALG,WQKDCALG,WQKDCALM(1)
      WRITE(2,*)WQKRC,WQKLC,WQKDC(1),WQKRCALG,WQKLCALG,WQKDCALG,WQKDCALM(1)
      WRITE(2,80)'* MINIMUM DISSOLUTION RATE (/DAY) OF ORGANIC C    '
      WRITE(2,81)' : (KRC, KLC, KDC)       = ', WQKRC,WQKLC,WQKDC(1)
      WRITE(2,80)'* CONSTANT RELATING DISSOLUTION RATE TO ALGAE     '
      WRITE(2,81)' : (KRCALG,KLCALG,KDCALG)= ', WQKRCALG,WQKLCALG,WQKDCALG
!17
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQTRHDR,WQTRMNL,WQKTHDR,WQKTMNL,WQKHORDO,WQKHDNN,WQAANOX
      WRITE(2,*) WQTRHDR,WQTRMNL,WQKTHDR,WQKTMNL,WQKHORDO,WQKHDNN,WQAANOX
      WRITE(2,80)'* REFERENCE TEMP FOR HYDROLYSIS/MINERALIZATION(OC)'
      WRITE(2,81)' : (TRHDR, TRMNL)        = ', WQTRHDR,WQTRMNL
      WRITE(2,80)'* TEMPERATURE EFFECT ON HYDROLYSIS/MINERALIZATION '
      WRITE(2,81)' : (KTHDR, KTMNL)        = ', WQKTHDR,WQKTMNL
      WRITE(2,80)'* HALF-SAT. CONSTANT FOR OXIC RESP/DENITRIFICATION'
      WRITE(2,81)' : (KHORDO, KHDNN)       = ', WQKHORDO,WQKHDNN
      WRITE(2,80)'* RATION OF DENITRIFICATION TO OXIC DOC RESP      '
      WRITE(2,81)' : (AANOX)               = ', WQAANOX
      WQAANOX = WQAANOX*WQKHORDO
!
! CONSTANT PARAMETERS FOR PHOSPHORUS (TABLE 3-3)
!
!18
!   MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFPRP,WQFPLP,WQFPDP,WQFPIP,WQFPRC,WQFPRD,WQFPRG,WQFPLC,WQFPLD,WQFPLG
      WRITE(2,*) WQFPRP,WQFPLP,WQFPDP,WQFPIP,WQFPRC,WQFPRD,WQFPRG,WQFPLC,WQFPLD,WQFPLG
      WRITE(2,80)'* PHOSPHORUS DISTRIBUTION COEF FOR ALGAL PREDATION'
      WRITE(2,81)' : (FPRP,FPLP,FPDP,FPIP) = ', WQFPRP,WQFPLP,WQFPDP,WQFPIP
      WRITE(2,80)'* PHOSPHORUS DIST COEF OF RPOP FOR ALGAL METABOLIS'
      WRITE(2,81)' : (FPRC, FPRD, FPRG)    = ', WQFPRC,WQFPRD,WQFPRG
      WRITE(2,80)'* PHOSPHORUS DIST COEF OF LPOP FOR ALGAL METABOLIS'
      WRITE(2,81)' : (FPLC, FPLD, FPLG)    = ', WQFPLC,WQFPLD,WQFPLG
      XP = ABS(1.0 - (WQFPRP+WQFPLP+WQFPDP+WQFPIP))
      IF(XP .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FPRP+FPLP+FPDP+FPIP NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
!19
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQFPRPM,WQFPLPM,WQFPDPM,WQFPIPM,WQFPRM,WQFPLM,WQAPCM
      WRITE(2,*)WQFPRPM,WQFPLPM,WQFPDPM,WQFPIPM,WQFPRM,WQFPLM,WQAPCM
!
!20
!   MODIFIED BY J.S.(5/5/98)
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFPDC,WQFPDD,WQFPDG,WQFPDM,WQFPIC,WQFPID,WQFPIG,WQFPIM,WQKPO4P
      WRITE(2,*) WQFPDC,WQFPDD,WQFPDG,WQFPDM,WQFPIC,WQFPID,WQFPIG,WQFPIM,WQKPO4P
      IF(IWQSRP.NE.1 .AND. IWQSRP.NE.2)THEN
        WQKPO4P = 0.0
        WRITE(2,80)': NO SORPTION OF PO4T/SA, SO KPO4P IS FORCED TO 0 '
      ENDIF
      WRITE(2,80)'* PHOSPHORUS DIST COEF OF DOP FOR ALGAL METABOLISM'
      WRITE(2,81)' : (FPDC, FPDD, FPDG)    = ', WQFPDC,WQFPDD,WQFPDG
      WRITE(2,80)'* PHOSPHORUS DIST COEF OF NH4 FOR ALGAL METABOLISM'
      WRITE(2,81)' : (FPIC, FPID, FPIG)    = ', WQFPIC,WQFPID,WQFPIG
      WRITE(2,82)'* PARITITION COEFF FOR SORBED/DISSOLVED PO4 =',WQKPO4P
      XPC = ABS(1.0 - (WQFPRC+WQFPLC+WQFPDC+WQFPIC))
      IF(XPC .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FPRC+FPLC+FPDC+FPIC NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
      XPD = ABS(1.0 - (WQFPRD+WQFPLD+WQFPDD+WQFPID))
      IF(XPD .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FPRD+FPLD+FPDD+FPID NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
      XPG = ABS(1.0 - (WQFPRG+WQFPLG+WQFPDG+WQFPIG))
      IF(XPG .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FPRG+FPLG+FPDG+FPIG NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
!21

      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQKRP,WQKLP,WQKDP,WQKRPALG,WQKLPALG,WQKDPALG,WQCP1PRM,WQCP2PRM,WQCP3PRM
      WRITE(2,*) WQKRP,WQKLP,WQKDP,WQKRPALG,WQKLPALG,WQKDPALG,WQCP1PRM,WQCP2PRM,WQCP3PRM
      WRITE(2,80)'* MINIMUM HYDROLYSIS RATE (/DAY) OF ORGANIC P     '
      WRITE(2,81)' : (KRP, KLP, KDP)       = ', WQKRP,WQKLP,WQKDP
      WRITE(2,80)'* CONSTANT RELATING HYDROLYSIS RATE TO ALGAE      '
      WRITE(2,81)' : (KRPALG,KLPALG,KDPALG)= ', WQKRPALG,WQKLPALG,WQKDPALG
      WRITE(2,80)'* CONSTANT USED IN DETERMINING P-TO-C RATIO       '
      WRITE(2,81)' : (CPPRM1,CPPRM2,CPPRM3)= ', WQCP1PRM,WQCP2PRM,WQCP3PRM
!
! CONSTANT PARAMETERS FOR NITROGEN (TABLE 3-4)
!
!22
!   MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFNRP,WQFNLP,WQFNDP,WQFNIP,WQFNRC,WQFNRD,WQFNRG,WQFNLC,WQFNLD,WQFNLG
      WRITE(2,*) WQFNRP,WQFNLP,WQFNDP,WQFNIP,WQFNRC,WQFNRD,WQFNRG,WQFNLC,WQFNLD,WQFNLG
      WRITE(2,80)'* NITROGEN DISTRIBUTION COEFF FOR ALGAL PREDATION '
      WRITE(2,81)' : (FNRP,FNLP,FNDP,FNIP) = ', WQFNRP,WQFNLP,WQFNDP,WQFNIP
      WRITE(2,80)'* NITROGEN DIST COEF OF RPON FOR ALGAL METABOLISM '
      WRITE(2,81)' : (FNRC, FNRD, FNRG)    = ', WQFNRC,WQFNRD,WQFNRG
      WRITE(2,80)'* NITROGEN DIST COEF OF LPON FOR ALGAL METABOLISM '
      WRITE(2,81)' : (FNLC, FNLD, FNLG)    = ', WQFNLC,WQFNLD,WQFNLG
      XN = ABS(1.0 - (WQFNRP+WQFNLP+WQFNDP+WQFNIP))
      IF(XN .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FNRP+FNLP+FNDP+FNIP NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
!23
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQFNRPM,WQFNLPM,WQFNDPM,WQFNIPM,WQFNRM,WQFNLM
      WRITE(2,*)WQFNRPM,WQFNLPM,WQFNDPM,WQFNIPM,WQFNRM,WQFNLM
!24
!   MODIFIED BY J.S.(5/5/98)
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFNDC,WQFNDD,WQFNDG,WQFNDM,WQFNIC,WQFNID,WQFNIG,WQFNIM,WQANCC,WQANCD,WQANCG,WQANCM
      WRITE(2,*) WQFNDC,WQFNDD,WQFNDG,WQFNDM,WQFNIC,WQFNID,WQFNIG,WQFNIM,WQANCC,WQANCD,WQANCG,WQANCM
      WRITE(2,80)'* NITROGEN DIST COEF OF DON FOR ALGAL METABOLISM  '
      WRITE(2,81)' : (FNDC, FNDD, FNDG)    = ', WQFNDC,WQFNDD,WQFNDG
      WRITE(2,80)'* NITROGEN DIST COEF OF NH4 FOR ALGAL METABOLISM  '
      WRITE(2,81)' : (FNIC, FNID, FNIG)    = ', WQFNIC,WQFNID,WQFNIG
      WRITE(2,80)'* NITROGEN-TO-CARBON RATIO IN ALGAE               '
      WRITE(2,81)' : (ANCC, ANCD, ANCG)    = ', WQANCC,WQANCD,WQANCG
      XNC = ABS(1.0 - (WQFNRC+WQFNLC+WQFNDC+WQFNIC))
      IF(XNC .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FNRC+FNLC+FNDC+FNIC NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
      XND = ABS(1.0 - (WQFNRD+WQFNLD+WQFNDD+WQFNID))
      IF(XND .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FNRD+FNLD+FNDD+FNID NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
      XNG = ABS(1.0 - (WQFNRG+WQFNLG+WQFNDG+WQFNIG))
      IF(XNG .GT. 0.0001)THEN
        WRITE(2,*)
        WRITE(2,*) ' WARNING!  FNRG+FNLG+FNDG+FNIG NOT EQUAL TO 1.0'
        WRITE(2,*)
      ENDIF
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQANDC,WQNITM,WQKHNDO,WQKHNN,WQTNIT,WQKN1,WQKN2
      WRITE(2,*) WQANDC,WQNITM,WQKHNDO,WQKHNN,WQTNIT,WQKN1,WQKN2
      WRITE(2,82)'* MASS NO3 REDUCED PER DOC OXIDIZED (GN/GC)= ',WQANDC
     *          ,'* MAXIMUM NITRIFICATION RATE (G N /M^3/D)  = ',WQNITM
     *          ,'  REFERENCE TEMP FOR NITRIFICATION (DEGC)  = ',WQTNIT
      WRITE(2,80)'* NITRIFICATION HALF-SAT CONSTANT FOR DO & NH4    '
      WRITE(2,81)' : (KHNITDO, KHNITN)     = ', WQKHNDO,WQKHNN
      WRITE(2,80)'* SUB & SUPER-OPTIMUM TEMP EFFECT ON NITRIFICATION'
      WRITE(2,81)' : (KNIT1, KNIT2)        = ', WQKN1,WQKN2
!
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQKRN,WQKLN,WQKDN,WQKRNALG,WQKLNALG,WQKDNALG
      WRITE(2,*) WQKRN,WQKLN,WQKDN,WQKRNALG,WQKLNALG,WQKDNALG
      WRITE(2,80)'* MINIMUM HYDROLYSIS RATE (/DAY) OF ORGANIC N     '
      WRITE(2,81)' : (KRN, KLN, KDN)       = ', WQKRN,WQKLN,WQKDN
      WRITE(2,80)'* CONSTANT RELATING HYDROLYSIS RATE TO ALGAE      '
      WRITE(2,81)' : (KRNALG,KLNALG,KDNALG)= ', WQKRNALG,WQKLNALG,WQKDNALG
!
! CONSTANT PARAMETERS FOR SILICA (TABLE 3-5)
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQFSPP,WQFSIP,WQFSPD,WQFSID,WQASCD,WQKSAP,WQKSU,WQTRSUA,WQKTSUA
      WRITE(2,*) WQFSPP,WQFSIP,WQFSPD,WQFSID,WQASCD,WQKSAP,WQKSU,WQTRSUA,WQKTSUA
      IF(IWQSRP.NE.1 .AND. IWQSRP.NE.2)THEN
        WQKSAP = 0.0
        WRITE(2,80)': NO SORPTION OF PO4T/SA, SO KSAP IS FORCED TO 0  '
      ENDIF
      WRITE(2,80)'* SILICA DISTRIBUTION COEFF FOR DIATOM PREDATION  '
      WRITE(2,81)' : (FSPP, FSIP)          = ', WQFSPP,WQFSIP
      WRITE(2,80)'* SILICA DISTRIBUTION COEFF FOR DIATOM METABOLISM '
      WRITE(2,81)' : (FSPD, FSID)          = ', WQFSPD,WQFSID
      WRITE(2,82)'*SILICA-TO-CARBON RATIO IN DIATOMS        = ',WQASCD
     *          ,'*PARITITION COEFF FOR SORBED/DISSOLVED SA = ',WQKSAP
     *          ,'*DISSOLUTION RATE (/D) OF PSI             = ',WQKSU
     *          ,' REFERENCE TEMP FOR PSI DISSOLUTION (OC)  = ',WQTRSUA
     *          ,' TEMPERATURE EFFECT ON PSI DISSOLUTION    = ',WQKTSUA
!XH   IF(WQFSPP+WQFSIP.NE.1.0) STOP 'ERROR!! INVALID FSPP,FSIP VALUES'
!XH   IF(WQFSPD+WQFSID.NE.1.0) STOP 'ERROR!! INVALID FSPD,FSID VALUES'
!
! CONSTANT PARAMETERS FOR COD & DO (TABLE 3-6)
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQAOCR,WQAONT, WQKRO(1), WQKTR(1),WQKHCOD(1),WQKCD(1),WQTRCOD, WQKTCOD, WQAOCRPM, WQAOCRRM
      WRITE(2,*) WQAOCR,WQAONT, WQKRO(1), WQKTR(1),WQKHCOD(1),WQKCD(1),WQTRCOD, WQKTCOD, WQAOCRPM, WQAOCRRM
      WRITE(2,82)'* DO-TO-CARBON RATIO IN RESPIRATION        = ',WQAOCR
     *       ,':MASS DO CONSUMED PER NH4-N NITRIFIED     = ',WQAONT
     *       ,':PROPORN. CONSTANT FOR DO-REAERATION (MKS)= ',WQKRO(1)
     *       ,' TEMPERATURE EFFECT ON DO-REAERATION      = ',WQKTR(1)
     *       ,'*HALF-SAT CONSTANT OF DO FOR COD (GO2/M^3)= ',WQKHCOD(1)
     *       ,':OXIDATION RATE OF COD (/DAY)             = ',WQKCD(1)
     *       ,'  REFERENCE TEMP FOR COD OXIDATION (OC)    = ',WQTRCOD
     *       ,'  TEMPERATURE EFFECT ON COD OXIDATION      = ',WQKTCOD
     *       ,': DO-TO-CARBON RATIO MACROALGAE PHOTOSYNTH = ',WQAOCRPM
     *       ,': DO-TO-CARBON RATIO MACROALGAE RESPIRATION= ',WQAOCRRM
!
! CONSTANT PARAMETERS FOR TAM & FCB (TABLE 3-7)
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQKHBMF,WQBFTAM,WQTTAM,WQKTAM,WQTAMDMX,WQKDOTAM,WQKFCB,WQTFCB
      WRITE(2,*) WQKHBMF,WQBFTAM,WQTTAM,WQKTAM,WQTAMDMX,WQKDOTAM,WQKFCB,WQTFCB
      WRITE(2,82)
     *  '* DO WHERE TAM RELEASE IS HALF ANOXIC ONE  = ',WQKHBMF
     * ,'  ANOXIC RELEASE OF TAM (MOL/M^2/D)        = ',WQBFTAM
     * ,'  REFERENCE TEMP FOR TAM RELEASE (OC)      = ',WQTTAM
     * ,'  TEMPERATURE EFFECT ON TAM RELEASE        = ',WQKTAM
     * ,': TAM SOLUBILITY AT ANOXIC COND. (MOL/M^3) = ',WQTAMDMX
     * ,'  CONSTANT RELATING TAM SOLUBILITY TO DO   = ',WQKDOTAM
     * ,'* FIRST-ORDER DIE-OFF RATE AT 20OC (/D)    = ',WQKFCB
     * ,'  TEMPERATURE EFFECT ON BACTERIA DIE-OFF   = ',WQTFCB
!
! SET UP LOOK-UP TABLE FOR TEMPERATURE DEPENDENCY OVER -15OC TO 40OC
!

      DO M=1,NWQTD
!        WTEMP =1.00*REAL(M-1)*0.5 - 4.95
! -charles       WTEMP =1.00*REAL(M-1)*0.1 - 14.95
        WTEMP =0.25*REAL(M)-30.25
!       WTEMP =1.23*REAL(M-1)*0.1 - 14.95
!       WTEMP =1.4*REAL(M-1)*0.1 - 4.95
!       WTEMP =REAL(M-1)*0.1 - 4.95
!
!        IF(WTEMP.GT.WQTMC)THEN
!          WQTDGC(M) = EXP( WQKG1C*(WTEMP-WQTMC)*(WQTMC-WTEMP) )
!         ELSE
!          WQTDGC(M) = EXP( WQKG2C*(WTEMP-WQTMC)*(WQTMC-WTEMP) )
!        ENDIF
!
!        IF(WTEMP.GT.WQTMD)THEN
!          WQTDGD(M) = EXP( WQKG1D*(WTEMP-WQTMD)*(WQTMD-WTEMP) )
!         ELSE
!          WQTDGD(M) = EXP( WQKG2D*(WTEMP-WQTMD)*(WQTMD-WTEMP) )
!        ENDIF
!
!        IF(WTEMP.GT.WQTMG)THEN
!          WQTDGG(M) = EXP( WQKG1G*(WTEMP-WQTMG)*(WQTMG-WTEMP) )
!         ELSE
!          WQTDGG(M) = EXP( WQKG2G*(WTEMP-WQTMG)*(WQTMG-WTEMP) )
!        ENDIF
! MODIFIED ON 03/04/96 BY JMH/MRM:
        WQTDGC(M)=1.
        IF(WTEMP.LT.WQTMC1)THEN
          WQTDGC(M) = EXP(-WQKG1C*(WTEMP-WQTMC1)*(WTEMP-WQTMC1) )
        ENDIF
        IF(WTEMP.GT.WQTMC2)THEN
          WQTDGC(M) = EXP(-WQKG2C*(WTEMP-WQTMC2)*(WTEMP-WQTMC2) )
        ENDIF
!
        WQTDGD(M)=1.
        IF(WTEMP.LT.WQTMD1)THEN
          WQTDGD(M) = EXP(-WQKG1D*(WTEMP-WQTMD1)*(WTEMP-WQTMD1) )
        ENDIF
        IF(WTEMP.GT.WQTMD2)THEN
          WQTDGD(M) = EXP(-WQKG2D*(WTEMP-WQTMD2)*(WTEMP-WQTMD2) )
        ENDIF
!
        WQTDGG(M)=1.
        IF(WTEMP.LT.WQTMG1)THEN
          WQTDGG(M) = EXP(-WQKG1G*(WTEMP-WQTMG1)*(WTEMP-WQTMG1) )
        ENDIF
        IF(WTEMP.GT.WQTMG2)THEN
          WQTDGG(M) = EXP(-WQKG2G*(WTEMP-WQTMG2)*(WTEMP-WQTMG2) )
        ENDIF
! J.S.  5/5/98
        WQTDGM(M)=1.
        IF(IDNOTRVA.GT.0)THEN
          IF(WTEMP.LT.WQTMM1)THEN
            WQTDGM(M) = EXP(-WQKG1M*(WTEMP-WQTMM1)*(WTEMP-WQTMM1) )
          ENDIF
          IF(WTEMP.GT.WQTMM2)THEN
            WQTDGM(M) = EXP(-WQKG2M*(WTEMP-WQTMM2)*(WTEMP-WQTMM2) )
          ENDIF
          WQTDRM(M) = EXP( WQKTBM*(WTEMP-WQTRM) )
        ENDIF
! J.S.
! MRM: 06/20/98
!  THE FOLLOWING WQTDGP VARIABLE IS A TEMPERATURE RELATED ADJUSTMENT
!  TO THE PREDATION AND/OR BASAL MATABOLISM RATE TO ALLOW DIATOMS
!  TO BLOOM IN WINTER (OR OTHER TIME OF YEAR).
        WQTDGP(M)=1.
        IF(WTEMP.LT.WQTMP1)THEN
          WQTDGP(M) = EXP(-WQKG1P*(WTEMP-WQTMP1)*(WTEMP-WQTMP1) )
        ENDIF
        IF(WTEMP.GT.WQTMD2)THEN
          WQTDGP(M) = EXP(-WQKG2P*(WTEMP-WQTMP2)*(WTEMP-WQTMP2) )
        ENDIF
! MRM
!
!        WRITE(1,555)WTEMP,WQTDGC(M),WQTDGD(M),WQTDGG(M),WQTDGM(M)
555     FORMAT(F7.2,4E12.4)
        WQTDRC(M) = EXP( WQKTBC*(WTEMP-WQTRC) )
        WQTDRD(M) = EXP( WQKTBD*(WTEMP-WQTRD) )
        WQTDRG(M) = EXP( WQKTBG*(WTEMP-WQTRG) )
        WQTDHDR(M) = EXP( WQKTHDR*(WTEMP-WQTRHDR) )
        WQTDMNL(M) = EXP( WQKTMNL*(WTEMP-WQTRMNL) )
!
        IF(WTEMP.GT.WQTNIT)THEN
          WQTDNIT(M)=WQNITM*EXP( WQKN1*(WTEMP-WQTNIT)*(WQTNIT-WTEMP) )
         ELSE
          WQTDNIT(M)=WQNITM*EXP( WQKN2*(WTEMP-WQTNIT)*(WQTNIT-WTEMP) )
        ENDIF
!
        WQKSUA(M) = WQKSU * EXP( WQKTSUA*(WTEMP-WQTRSUA) )
        WQKCOD(M,1) = WQKCD(1) * EXP( WQKTCOD*(WTEMP-WQTRCOD) )
        TT20 = WTEMP-20.0
        WQTDKR(M,1) = WQKTR(1)**TT20
            WRITE(2,2222)M,WQKTR(1),WQTDKR(M,1)
        WQTDTAM(M) = WQKHBMF * WQBFTAM * EXP( WQKTAM*(WTEMP-WQTTAM) )
        WQTT = WQKFCB * WQTFCB**TT20 * DTWQO2
        WQTD1FCB(M) = 1.0 - WQTT
        WQTD2FCB(M) = 1.0 / (1.0 + WQTT)
        ENDDO
!
! READ SECOND PART: RWQC2
! PARAMETERS FOR WATER QUALITY STATE VARIABLE TIME SERIES
!
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      READ(1,*) (NWQCSR(NW),NW=1,NWQV)
      WRITE(2,*) (NWQCSR(NW),NW=1,NWQV)
      WRITE(2,970)(NWQCSR(NW),NW=1,NWQV)
!
!
! READ SECOND PART: RWQC2
! PARAMETERS FOR OPEN BOUNDARY CONDITIONS
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) NWQOBS,NWQOBW,NWQOBE,NWQOBN
      WRITE(2,*) NWQOBS,NWQOBW,NWQOBE,NWQOBN
      WRITE(2,23)'* # OF OPEN BDRY CELLS ON SOUTH BDRY       = ',NWQOBS
      WRITE(2,23)'* # OF OPEN BDRY CELLS ON WEST BDRY        = ',NWQOBW
      WRITE(2,23)'* # OF OPEN BDRY CELLS ON EAST BDRY        = ',NWQOBE
      WRITE(2,23)'* # OF OPEN BDRY CELLS ON NORTH BDRY       = ',NWQOBN
      IF(NWQOBS.GT.NBBSM) STOP 'ERROR!! NWQOBS SHOULD <= NBBSM'
      IF(NWQOBW.GT.NBBWM) STOP 'ERROR!! NWQOBW SHOULD <= NBBWM'
      IF(NWQOBE.GT.NBBEM) STOP 'ERROR!! NWQOBE SHOULD <= NBBEM'
      IF(NWQOBN.GT.NBBNM) STOP 'ERROR!! NWQOBN SHOULD <= NBBNM'
!      IF(NWQOBS.NE.NCBS) STOP 'ERROR!! NWQOBS =\ NCBS'
!      IF(NWQOBW.NE.NCBW) STOP 'ERROR!! NWQOBW =\ NCBW'
!      IF(NWQOBE.NE.NCBE) STOP 'ERROR!! NWQOBE =\ NCBE'
!      IF(NWQOBN.NE.NCBN) STOP 'ERROR!! NWQOBN =\ NCBN'
      WRITE(2,999)
!      WRITE(2,80)'* NOTE THAT THE ORDER OF OB CELLS BELOW SHOULD BE '
!     WRITE(2,80)'  THE SAME AS THAT IN HYM, IWQCBS=ICBS,JWQCBS=JCBS'
      WRITE(2,80)'* CONSTANT OBC AT (ICBX(M),JCBX(M)) IF IWQOBX(M)=0'
      WRITE(2,80)': READ TIME-SERIES OBCS IWQOBX TIMES IF IWQOBX > 0'
!
! SOUTH BDRY
!
!      DO M=1,2
!       READ(1,90) TITLE(M)
!       WRITE(2,90) TITLE(M)
!     ENDDO
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBS.GT.0)THEN
        DO M=1,NWQOBS
          READ(1,*) IWQCBS(M),JWQCBS(M),(IWQOBS(M,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBS(M),JWQCBS(M),(IWQOBS(M,NW),NW=1,NWQV)
          WRITE(2,969) IWQCBS(M),JWQCBS(M),(IWQOBS(M,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
!: CONSTANT BOTTOM AND SURFACE OBCS
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBS.GT.0)THEN
        DO M=1,NWQOBS
          READ(1,*) IWQCBS(M),JWQCBS(M),(WQOBCS(M,1,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBS(M),JWQCBS(M),(WQOBCS(M,1,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBS(M),JWQCBS(M),(WQOBCS(M,1,NW),NW=1,NWQV)
        ENDDO
      ENDIF
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      WRITE(2,999)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBS.GT.0)THEN
        DO M=1,NWQOBS
          READ(1,*) IWQCBS(M),JWQCBS(M),(WQOBCS(M,2,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBS(M),JWQCBS(M),(WQOBCS(M,2,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBS(M),JWQCBS(M),(WQOBCS(M,2,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
! WEST BDRY
!
!      DO M=1,2
!       READ(1,90) TITLE(M)
!       WRITE(2,90) TITLE(M)
!     ENDDO
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBW.GT.0)THEN
        DO M=1,NWQOBW
          READ(1,*) IWQCBW(M),JWQCBW(M),(IWQOBW(M,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBW(M),JWQCBW(M),(IWQOBW(M,NW),NW=1,NWQV)
          WRITE(2,969) IWQCBW(M),JWQCBW(M),(IWQOBW(M,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
!: CONSTANT BOTTOM AND SURFACE OBCS
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBW.GT.0)THEN
        DO M=1,NWQOBW
          READ(1,*) IWQCBW(M),JWQCBW(M),(WQOBCW(M,1,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBW(M),JWQCBW(M),(WQOBCW(M,1,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBW(M),JWQCBW(M),(WQOBCW(M,1,NW),NW=1,NWQV)
        ENDDO
      ENDIF
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      WRITE(2,999)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBW.GT.0)THEN
        DO M=1,NWQOBW
          READ(1,*) IWQCBW(M),JWQCBW(M),(WQOBCW(M,2,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBW(M),JWQCBW(M),(WQOBCW(M,2,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBW(M),JWQCBW(M),(WQOBCW(M,2,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
! EAST BDRY
!
!      DO M=1,2
!       READ(1,90) TITLE(M)
!       WRITE(2,90) TITLE(M)
!     ENDDO
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBE.GT.0)THEN
        DO M=1,NWQOBE
          READ(1,*) IWQCBE(M),JWQCBE(M),(IWQOBE(M,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBE(M),JWQCBE(M),(IWQOBE(M,NW),NW=1,NWQV)
          WRITE(2,969) IWQCBE(M),JWQCBE(M),(IWQOBE(M,NW),NW=1,NWQV)
        ENDDO
       ENDIF
!
!: CONSTANT BOTTOM AND SURFACE OBCS
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBE.GT.0)THEN
        DO M=1,NWQOBE
          READ(1,*) IWQCBE(M),JWQCBE(M),(WQOBCE(M,1,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBE(M),JWQCBE(M),(WQOBCE(M,1,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBE(M),JWQCBE(M),(WQOBCE(M,1,NW),NW=1,NWQV)
        ENDDO
      ENDIF
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBE.GT.0)THEN
        DO M=1,NWQOBE
          READ(1,*) IWQCBE(M),JWQCBE(M),(WQOBCE(M,2,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBE(M),JWQCBE(M),(WQOBCE(M,2,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBE(M),JWQCBE(M),(WQOBCE(M,2,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
! NORTH BDRY
!
!      DO M=1,2
!       READ(1,90) TITLE(M)
!       WRITE(2,90) TITLE(M)
!     ENDDO
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,90) TITLE(1)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBN.GT.0)THEN
        DO M=1,NWQOBN
          READ(1,*) IWQCBN(M),JWQCBN(M),(IWQOBN(M,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBN(M),JWQCBN(M),(IWQOBN(M,NW),NW=1,NWQV)
          WRITE(2,969) IWQCBN(M),JWQCBN(M),(IWQOBN(M,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
!: CONSTANT BOTTOM AND SURFACE OBCS
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBN.GT.0)THEN
        DO M=1,NWQOBN
          READ(1,*) IWQCBN(M),JWQCBN(M),(WQOBCN(M,1,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBN(M),JWQCBN(M),(WQOBCN(M,1,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBN(M),JWQCBN(M),(WQOBCN(M,1,NW),NW=1,NWQV)
        ENDDO
      ENDIF
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
        DO M=1,5
          READ(1,90) TITLE(M)
          WRITE(2,90) TITLE(M)
        ENDDO
      IF(NWQOBN.GT.0)THEN
        DO M=1,NWQOBN
          READ(1,*) IWQCBN(M),JWQCBN(M),(WQOBCN(M,2,NW),NW=1,NWQV)
          WRITE(2,*) IWQCBN(M),JWQCBN(M),(WQOBCN(M,2,NW),NW=1,NWQV)
          WRITE(2,97) IWQCBN(M),JWQCBN(M),(WQOBCN(M,2,NW),NW=1,NWQV)
        ENDDO
      ENDIF
!
! SPATIALLY/TEMPORALLY CONSTANT INITIAL CONDITIONS: WQCHLX=1/WQCHLX
! READ DATA POINTS & DO INTERNAL INTERPOLATION?
!
!39
!   MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0)THEN
        DO M=1,3
          READ(1,999)
        ENDDO
      ENDIF
      READ(1,*) (WQV(1,1,NW), NW=1,6)
      WRITE(2,*) (WQV(1,1,NW), NW=1,6)
      READ(1,*) (WQV(1,1,NW), NW=7,13)
      WRITE(2,*) (WQV(1,1,NW), NW=7,13)
      READ(1,*) (WQV(1,1,NW), NW=14,NWQV),WQV(1,1,IDNOTRVA),WQMCMIN
      WRITE(2,*) (WQV(1,1,NW), NW=14,NWQV),WQV(1,1,IDNOTRVA),WQMCMIN
      IF(IWQICI.NE.1)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
        WRITE(2,21)' : (BC, BD, BG)         = ', (WQV(1,1,NW),NW=1,3)
        WRITE(2,21)' : (RPOC, LPOC, DOC)    = ', (WQV(1,1,NW),NW=4,6)
        WRITE(2,21)' : (RPOP,LPOP,DOP,PO4T) = ', (WQV(1,1,NW),NW=7,10)
        WRITE(2,21)' : (RPON, LPON, DON)    = ', (WQV(1,1,NW),NW=11,13)
        WRITE(2,21)' : (NH4, NO3)           = ', (WQV(1,1,NW),NW=14,15)
        WRITE(2,21)' : (SU, SA, COD, DO)    = ', (WQV(1,1,NW),NW=16,19)
        WRITE(2,981)' : (TAM, FCB,MALG)     = ',(WQV(1,1,NW),NW=20,NWQV+1)
        WQCHL(1,1) = WQV(1,1,1)*WQCHLC(1) + WQV(1,1,2)*WQCHLD(1)+ WQV(1,1,3)*WQCHLG(1)                                                       !hnr 10/2010
        IF(IWQSRP.EQ.1)THEN
          O2WQ = MAX(WQV(1,1,19), 0.0)
          WQTAMD = MIN( WQTAMDMX*EXP(-WQKDOTAM*O2WQ), WQV(1,1,20) )
          WQTAMP(1,1) = WQV(1,1,20) - WQTAMD
          WQPO4D(1,1) = WQV(1,1,10) / (1.0 + WQKPO4P*WQTAMP(1,1))
          WQSAD(1,1)  = WQV(1,1,17) / (1.0 + WQKSAP*WQTAMP(1,1))
         ELSE IF(IWQSRP.EQ.2)THEN
          WQPO4D(1,1) = WQV(1,1,10) / (1.0 + WQKPO4P*SEDT(1,1))
          WQSAD(1,1)  = WQV(1,1,17) / (1.0 + WQKSAP*SEDT(1,1))
         ELSE
          WQPO4D(1,1) = WQV(1,1,10)
          WQSAD(1,1)  = WQV(1,1,17)
        ENDIF
        DO NW=1,NWQV
         TVARWQ=WQV(1,1,NW)
         DO K=1,KC
          WQV(LC,K,NW) = TVARWQ
          WQV(1 ,K,NW) = TVARWQ
          WQVO(LC,K,NW) = TVARWQ
          WQVO(1 ,K,NW) = TVARWQ
         ENDDO
        ENDDO
        DO NW=1,NWQV
         TVARWQ=WQV(1,1,NW)
         DO ND=1,NDMWQ
          LF=2+(ND-1)*LDMWQ
          LL=LF+LDM-1
          DO K=1,KC
           DO L=LF,LL
            WQV(L,K,NW) = TVARWQ
           ENDDO
          ENDDO
         ENDDO
        ENDDO
        XWQCHL = WQCHL(1,1)
        XWQTAMP = WQTAMP(1,1)
        XWQPO4D = WQPO4D(1,1)
        XWQSAD = WQSAD(1,1)
        DO K=1,KC
         WQCHL(LC,K) = XWQCHL
         WQTAMP(LC,K) = XWQTAMP
         WQPO4D(LC,K) = XWQPO4D
         WQSAD(LC,K) = XWQSAD
         WQCHL(1,K) = XWQCHL
         WQTAMP(1,K) = XWQTAMP
         WQPO4D(1,K) = XWQPO4D
         WQSAD(1,K) = XWQSAD
        ENDDO
        DO ND=1,NDMWQ
         LF=2+(ND-1)*LDMWQ
         LL=LF+LDM-1
         DO K=1,KC
          DO L=LF,LL
           WQCHL(L,K) = XWQCHL
           WQTAMP(L,K) = XWQTAMP
           WQPO4D(L,K) = XWQPO4D
           WQSAD(L,K) = XWQSAD
          ENDDO
         ENDDO
        ENDDO
      ENDIF
!
! MODIFIED BY J.S.(5/5/98)
!
! READ CELL MAPPING FILE 'MACALGMP.INP' AND SET INITIAL CONDITION.
! MACROALGAE WILL RESIDE ONLY IN THE BOTTOM LAYER.
!
! 09/02/99 M.MORTON: ADDED KMV VELOCITY HALF-SATURATION, KBP DENSITY
!   HALF SATURATION, AND PSHADE FACTOR TO BETTER CONTROL MACROALGAE
!   GROWTH.
!
      IF(IDNOTRVA.GT.0)THEN
        DO L=1,LC
          SMAC(L)=0.0
          PSHADE(L)=1.0
          WQKMV(L)=0.25
          WQKMVMIN(L)=0.15
          WQKBP(L)=6.5
          WQKMVA(L)=1.0
          WQKMVB(L)=12.0
          WQKMVC(L)=0.3
          WQKMVD(L)=0.25
          WQKMVE(L)=2.0
        ENDDO
        WRITE(2,9003)
9003    FORMAT(/,' MACALGMP.INP - MACROALGAE MAP FILE',/,
     +   ' PSHADE = SHADE FACTOR FOR TREE CANOPY (1.0=NO CANOPY)',/,
     +   ' KMV    = MACROALGAE HALF-SATURATION VELOCITY (M/SEC)',/,
     +   ' KMVMIN = MACROALGAE VELOCITY LIMITATION MINIMUM (M/SEC)',/,
     +   ' KBP    = MACROALGAE HALF-SATURATION DENSITY (G C/M2)',/,
     +   ' KMVA   = MACROALGAE VEL. LIMIT LOGISTIC FUNC. PARAM. A',/,
     +   ' KMVB   = MACROALGAE VEL. LIMIT LOGISTIC FUNC. PARAM. B',/,
     +   ' KMVC   = MACROALGAE VEL. LIMIT LOGISTIC FUNC. PARAM. C',/,
     +   ' KMVD   = MACROALGAE VEL. LIMIT LOGISTIC FUNC. PARAM. D',/,
     +   ' KMVE   = MACROALGAE VEL. LIMIT LOGISTIC FUNC. PARAM. E',/,
     +   '   I   J   L PSHADE    KMV KMVMIN    KBP   KMVA   KMVB',
     +   '   KMVC   KMVD   KMVE')
        OPEN(3,FILE='MACALGMP.INP',STATUS='UNKNOWN')
        CALL SKIPCOMM(3, CCMRM)
9001    READ(3,*,END=9002) II, JJ, XMRM1, XMRM2, XMRM3, XMRM4,XMRMA, XMRMB, XMRMC, XMRMD, XMRME
        IF(II .LE. 0) GOTO 9002
        IF(IJCT(II,JJ).LT.1 .OR. IJCT(II,JJ).GT.8)THEN
          PRINT*, 'I, J, IJCT(I,J) = ', II,JJ,IJCT(II,JJ)
           STOP 'ERROR!! INVALID (I,J) IN FILE MACALGMP.INP'
        ENDIF
        LL=LIJ(II,JJ)
        SMAC(LL)=1.0
        PSHADE(LL)=XMRM1
        WQKMV(LL)=XMRM2
        WQKMVMIN(LL)=XMRM3
        WQKBP(LL)=XMRM4
        WQKMVA(LL)=XMRMA
        WQKMVB(LL)=XMRMB
        WQKMVC(LL)=XMRMC
        WQKMVD(LL)=XMRMD
        WQKMVE(LL)=XMRME
        WQV(LL,1,IDNOTRVA)=WQV(1,1,IDNOTRVA)
        WQVO(LL,1,IDNOTRVA)=WQV(1,1,IDNOTRVA)
        WRITE(2,9004) II, JJ, LL, PSHADE(LL), WQKMV(LL), WQKMVMIN(LL),
     +    WQKBP(LL), WQKMVA(LL), WQKMVB(LL), WQKMVC(LL), WQKMVD(LL),
     +    WQKMVE(LL)
9004    FORMAT(' ',I3,' ',I3,' ',I3, 9F7.3)
        GOTO 9001
9002    CLOSE(3)
        WQV(1,1,IDNOTRVA)=0.0
      ENDIF
!
! SPATIALLY/TEMPORALLY CONSTANT ALGAL GROWTH, RESPIRATION & PREDATION RATES
!
!
!40   MODIFIED BY J.S.(5/5/98)
!
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQPMC(1),WQPMD(1),WQPMG(1),WQPMM(1),WQBMRC(1),
     *    WQBMRD(1),WQBMRG(1),WQBMRM(1),WQPRRC(1),WQPRRD(1),
     *    WQPRRG(1),WQPRRM(1),WQKEB(1)
      WRITE(2,*) WQPMC(1),WQPMD(1),WQPMG(1),WQPMM(1),WQBMRC(1),
     *    WQBMRD(1),WQBMRG(1),WQBMRM(1),WQPRRC(1),WQPRRD(1),
     *    WQPRRG(1),WQPRRM(1),WQKEB(1)
      IF(IWQAGR.NE.1)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
        WRITE(2,80)'* ALGAL GROWTH RATE (/DAY)                        '
        WRITE(2,21)' : (PMC, PMD, PMG)       = ', WQPMC(1),WQPMD(1),WQPMG(1)
        WRITE(2,80)'* ALGAL BASAL METABOLISM RATE (/DAY)              '
        WRITE(2,21)' : (BMRC, BMRD, BMRG)    = ', WQBMRC(1),WQBMRD(1),WQBMRG(1)
        WRITE(2,80)'* ALGAL PREDATION RATE (/DAY)                     '
        WRITE(2,21)' : (PRRC, PRRD, PRRG)    = ', WQPRRC(1),WQPRRD(1),WQPRRG(1)
        WRITE(2,82)'* BASE LIGHT EXTINCTION COEFFICIENT (/M)   = ',WQKEB(1)
!        WRITE(2,82)
!     *    '* WQSDCOEF (SECCHI DEPTH = WQSDCOEF/WQKESS)= ',WQSDCOEF(1)
        DO I=2,IWQZ
          WQPMC(I)=WQPMC(1)
          WQPMD(I)=WQPMD(1)
          WQPMG(I)=WQPMG(1)
          WQPMM(I)=WQPMM(1)
          WQBMRC(I)=WQBMRC(1)
          WQBMRD(I)=WQBMRD(1)
          WQBMRG(I)=WQBMRG(1)
          WQBMRM(I)=WQBMRM(1)
          WQPRRC(I)=WQPRRC(1)
          WQPRRD(I)=WQPRRD(1)
          WQPRRG(I)=WQPRRG(1)
          WQPRRM(I)=WQPRRM(1)
          WQKEB(I)=WQKEB(1)
!          WQSDCOEF(I)=WQSDCOEF(1)
        ENDDO
      ENDIF
!41
! SPATIALLY/TEMPORALLY CONSTANT SETTLING VELOCITIES AND REAERATION FACTOR
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*)WQWSC(1),WQWSD(1),WQWSG(1),WQWSRP(1),WQWSLP(1),WQWSS(1),WQWSM, REAC(1)
      WRITE(2,*)WQWSC(1),WQWSD(1),WQWSG(1),WQWSRP(1),WQWSLP(1),WQWSS(1),WQWSM, REAC(1)
      IF(IWQSTL.NE.1)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
        WRITE(2,80)'* ALGAL SETTLING RATE (M/DAY)                     '
        WRITE(2,21)' : (WSC, WSD, WSG)       = ', WQWSC(1),WQWSD(1),WQWSG(1)
        WRITE(2,80)'* POM SETTLING RATE (M/DAY)                       '
        WRITE(2,21)' : (WSRP, WSLP)          = ', WQWSRP(1),WQWSLP(1)
        WRITE(2,80)'* SETTLING RATE OF PARTICULATE METAL (M/DAY)      '
        WRITE(2,21)' : (WSS)                 = ', WQWSS(1)
        DO I=2,IWQZ
          WQWSC(I)=WQWSC(1)
          WQWSD(I)=WQWSD(1)
          WQWSG(I)=WQWSG(1)
          WQWSRP(I)=WQWSRP(1)
          WQWSLP(I)=WQWSLP(1)
          WQWSS(I)=WQWSS(1)
          REAC(I)=REAC(1)
        ENDDO
      ENDIF
!
! SPATIALLY/TEMPORALLY CONSTANT BENTHIC FLUXES
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) WQBFPO4D(1),WQBFNH4(1),WQBFNO3(1),WQBFSAD(1),WQBFCOD(1),WQBFO2(1)
      WRITE(2,*) WQBFPO4D(1),WQBFNH4(1),WQBFNO3(1),WQBFSAD(1),WQBFCOD(1),WQBFO2(1)
      IF(IWQBEN.EQ.0)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
        WRITE(2,21)' : (PO4D, NH4, NO3)     = ',WQBFPO4D(1),WQBFNH4(1),WQBFNO3(1)
        WRITE(2,21)' : (SAD, COD, DO)       = ',WQBFSAD(1),WQBFCOD(1),WQBFO2(1)
        DO L=2,LA
          WQBFPO4D(L)=WQBFPO4D(1)
          WQBFNH4(L)=WQBFNH4(1)
          WQBFNO3(L)=WQBFNO3(1)
          WQBFSAD(L)=WQBFSAD(1)
          WQBFCOD(L)=WQBFCOD(1)
          WQBFO2(L)=WQBFO2(1)
        ENDDO
      ENDIF
!
! TEMPORALLY-CONSTANT VALUES FOR POINT SOURCE INPUT IN (KG/D) EXCEPT
! XPSQ (M^3/S), XPO2 (G/M^3), XPTAM (KMOL/D), XPFCB (MPN/100ML).
!: IN GES, LOAD IS IN (G/D) EXCEPT TAM IN (MOL/D), FCB IN (MPN/100ML)*(M^3/S).
!: TO CONVERT KG/D TO G/D, (XW KG/D)*(10^3 G/KG) = (CONV1*XW G/D) WITH
!   CONV1=1.0E3.
!: FOR O2, (XPSQ M^3/S)*(XPO2 G/M^3)*(86400 S/D) = (CONV2*XPSQ*XPO2 G/D)
!   WITH CONV2=8.64E4.
!: FOR TAM, (XPTAM KMOL/D)*(10^3 MOL/KMOL) = (CONV1*XPTAM MOL/D).
!: FOR FCB, (XPFCB MPN/100ML)*(XPSQ M^3/S)*(86400 S/D) =
!   (CONV2*XPSQ*XPFCB (MPN/100ML)*M^3/D).
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
!11_24      IF(IWQPSL.NE.1)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
!11_24      ENDIF
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      IF(ISSKIP .EQ. 0) READ(1,999)
      READ(1,*) IWQPS,NPSTMSR
      WRITE(2,*) IWQPS,NPSTMSR
      WRITE(2,23)'* NUMBER OF CELLS FOR POINT SOURCE INPUT  = ',IWQPS
      WRITE(2,23)'* NUMBER WITH VARIABLE POINT SOURCE INPUT = ',NPSTMSR
      IF(IWQPS.GT.NWQPS) STOP 'ERROR!! IWQPS SHOULD BE <= NWQPS'
!
!11_24      DO M=1,3
!11_24        READ(1,90) TITLE(M)
!11_24        IF(IWQPSL.NE.1) WRITE(2,90) TITLE(M)
!11_24      ENDDO
      DO M=1,3
        READ(1,90) TITLE(M)
        WRITE(2,90) TITLE(M)
      ENDDO
      DO M=1,IWQPS
        READ(1,*) I,J,K,ITMP,XPSQ,(XPSL(NW),NW=1,6)
        WRITE(2,*) I,J,K,ITMP,XPSQ,(XPSL(NW),NW=1,6)
        READ(1,*) (XPSL(NW),NW=7,13)
        WRITE(2,*) (XPSL(NW),NW=7,13)
        READ(1,*) (XPSL(NW),NW=14,NWQV)
        WRITE(2,*) (XPSL(NW),NW=14,NWQV)
!11_24        IF(IWQPSL.NE.1)THEN
          WRITE(2,294) I,J,K,ITMP,XPSQ,(XPSL(NW),NW=1,NWQV)
          IF(IJCT(I,J).LT.1 .OR. IJCT(I,J).GT.8)THEN
            WRITE(*,911) I,J
  911       FORMAT(/,' I,J = ', 2I5)
            STOP 'ERROR!! INVALID (I,J) IN FILE WQ3DWC.INP FOR PSL'
          ENDIF
!
!MRM M.R. MORTON  02/20/1999
!MRM ADDED A FIX HERE SO THAT MULTIPLE POINT SOURCE LOADS (PSL) CAN BE ADDED
!MRM TO THE SAME I,J CELL.  IN ORIGINAL CODE, THE PSL READ IN LAST
!MRM OVERWRITES ANY EARLIER PSLS IN THE SAME I,J CELL.
!MRM    M = POINT SOURCE NUMBER
!MRM    K = LAYER IN WHICH POINT SOURCE IS INTRODUCED
!MRM    L = CELL NUMBER FOR LOCATION I,J
!MRM    IWQPSC(L,K) = M, INDEX POINTER TO CONSTANT PSL NUMBER
!MRM    IWQPSV(L,K) = INDEX POINTER TO TIME-VARIABLE PSL IN WQPSL.INP
!MRM    ICPSL(M) = SAVES I CELL INDEX OF PSL M
!MRM    JCPSL(M) = SAVES J CELL INDEX OF PSL M
!MRM    KCPSL(M) = SAVES K LAYER INDEX OF PSL M
!CMRM    MVPSL(M) = INDEX POINTER TO TIME-VARIABLE PSL IN WQPSL.INP
          L = LIJ(I,J)
! JMH MODIFIED 5/18/00 TO ALLOW KCPSL(M) TO BE SET TO ZERO FOR UNIFORM DISTRIBUTION
! OF LOAD IN HORIZONTAL CELL STACK OVER ALL LAYERS
          DO KK=1,KC
            IWQPSC(L,KK)=M
            IWQPSV(L,KK)=ITMP
          ENDDO
          ICPSL(M)=I
          JCPSL(M)=J
          KCPSL(M)=K
          MVPSL(M)=ITMP
          WQPSQC(M)=XPSQ
          DO NW=1,18
            WQWPSLC(M,NW) = XPSL(NW) * CONV1
          ENDDO
          WQTT = XPSQ*CONV2
          WQWPSLC(M,19) = XPSL(19) * WQTT
          WQWPSLC(M,20) = XPSL(20) * CONV1
          WQWPSLC(M,NWQV) = XPSL(NWQV) * WQTT
!11_24        ENDIF
      ENDDO
!
! SPATIALLY/TEMPORALLY-CONSTANT VALUES FOR NON-POINT SOURCE INPUT IN (KG/D)
! EXCEPT XDSQ (M^3/S), XNO2 (MG/L), XNTAM (KMOL/D), XNFCB (MPN/100ML).
! MRM  NOTE: THIS GROUP IS NOW USED FOR DRY ATMOSPHERIC DEPOSITION WITH
!      CONSTITUENT UNITS OF G/M2/DAY EXCEPT FCB WHICH IS MPN/M2/DAY.
!
!     READ(1,999)
      WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      DO M=1,3
        READ(1,999)
      ENDDO
      READ(1,*) XDSQ,(XDSL(NW),NW=1,6)
      WRITE(2,*) XDSQ,(XDSL(NW),NW=1,6)
      READ(1,*) (XDSL(NW),NW=7,13)
      WRITE(2,*) (XDSL(NW),NW=7,13)
      READ(1,*) (XDSL(NW),NW=14,NWQV)
      WRITE(2,*) (XDSL(NW),NW=14,NWQV)
      IF(IWQNPL.NE.1)THEN
        WRITE(2,999)
        WRITE(2,90) TITLE(1)
        WRITE(2,21)' : (DSQ, BC, BD, BG)     = ',XDSQ,(XDSL(NW),NW=1,3)
        WRITE(2,21)' : (RPOC, LPOC, DOC)     = ',(XDSL(NW),NW=4,6)
        WRITE(2,21)' : (RPOP,LPOP,DOP,PO4T)  = ',(XDSL(NW),NW=7,10)
        WRITE(2,21)' : (RPON, LPON, DON)     = ',(XDSL(NW),NW=11,13)
        WRITE(2,21)' : (NH4, NO3)            = ',(XDSL(NW),NW=14,15)
        WRITE(2,21)' : (SU, SA, COD, DO)     = ',(XDSL(NW),NW=16,19)
        WRITE(2,981)' : (TAM, FCB)            = ',(XDSL(NW),NW=20,NWQV)
        WQDSQ(1,1) = XDSQ
        DO NW=1,18
          WQWDSL(1,1,NW) = XDSL(NW) * CONV1
        ENDDO
        WQTT = XDSQ*CONV2
        WQWDSL(1,1,19) = XDSL(19) * WQTT
        WQWDSL(1,1,20) = XDSL(20) * CONV1
        WQWDSL(1,1,NWQV) = XDSL(NWQV) * WQTT
!
        DO L=2,LA
          WQDSQ(L,1)=WQDSQ(1,1)
          DO NW=1,NWQV
! M. MORTON MODIFIED THE LINE BELOW SO THAT CONSTANT ATMOSPHERIC DEPOSITION
! CAN BE ADDED VIA THIS ROUTINE INSTEAD OF CONSTANT NPS INPUT WHICH THE
! ORIGINAL CODE CALLED FOR AND WHICH WAS NOT PARTICULARLY USEFUL.
! INPUT DATA (XDSL) ARE IN G/M2/DAY AND ARE MULTIPLIED BY THE CELL SURFACE
! AREA (DXYP) TO GET G/DAY.  ATMOSPHERIC DEPOSITION ONLY ENTERS THRU SURFACE
! LAYER (KC):
!            WQWDSL(L,1,NW)=WQWDSL(1,1,NW)
            WQWDSL(L,KC,NW) = XDSL(NW) * DXYP(L)
          ENDDO
        ENDDO
      ENDIF
!
! MRM THIS IS A NEW CARD GROUP ADDED 06/08/98 FOR WET ATMOSPHERIC
!     DEPOSITION.  THE VALUES FOR EACH WQ CONSTITUENT ARE IN MG/L AND
!     WILL BE MULTIPLIED BY THE RAINFALL FLOW RATE INTO EACH GRID CELL
!     TO GET A LOAD IN KG/DAY.
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,999)
      DO M=1,3
        READ(1,999)
      ENDDO
      READ(1,*) (WQATM(NW),NW=1,6)
      WRITE(2,*) (WQATM(NW),NW=1,6)
      READ(1,*) (WQATM(NW),NW=7,13)
      WRITE(2,*) (WQATM(NW),NW=7,13)
      READ(1,*) (WQATM(NW),NW=14,NWQV)
      WRITE(2,*) (WQATM(NW),NW=14,NWQV)
      WRITE(2,999)
      WRITE(2,90) TITLE(1)
      WRITE(2, 21)' : (BC, BD, BG)          = ',(WQATM(NW),NW=1,3)
      WRITE(2, 21)' : (RPOC, LPOC, DOC)     = ',(WQATM(NW),NW=4,6)
      WRITE(2, 21)' : (RPOP,LPOP,DOP,PO4T)  = ',(WQATM(NW),NW=7,10)
      WRITE(2, 21)' : (RPON, LPON, DON)     = ',(WQATM(NW),NW=11,13)
      WRITE(2, 21)' : (NH4, NO3)            = ',(WQATM(NW),NW=14,15)
      WRITE(2, 21)' : (SU, SA, COD, DO)     = ',(WQATM(NW),NW=16,19)
      WRITE(2,981)' : (TAM, FCB)            = ',(WQATM(NW),NW=20,NWQV)

!
! INPUT/OUTPUT FILE NAMES FOR SPATIALLY AND/OR TEMPORALLY VARYING PARAMETERS
!
!     READ(1,999)
!     WRITE(2,999)
      IF(ISSKIP .GT. 0) CALL SKIPCOMM(1,CCMRM)
      READ(1,90) TITLE(1)
      WRITE(2,999)
      WRITE(2,90) TITLE(1)
!
      READ(1,295) RSTOFN
      WRITE(2,85)'* OUTPUT FILE FOR RESTART WRITING         = ', RSTOFN
      IF(IWQRST.EQ.1)THEN
        OPEN(99,FILE=RSTOFN,STATUS='UNKNOWN')
        CLOSE(99,STATUS='DELETE')
        OPEN(99,FILE=RSTOFN,STATUS='UNKNOWN')
!XH        OPEN(UNIT=IWQORST,FILE=RSTOFN,STATUS='UNKNOWN')
        WRITE(99,888)
        CLOSE(99)
       ELSE
        IF(RSTOFN(1:4).NE.'NONE')STOP 'ERROR!! INVALID IWQORST/RSTOFN'
      ENDIF
  888 FORMAT('    L    K',
     *'          BC          BD          BG        RPOC        LPOC',
     *'         DOC        RPOP        LPOP         DOP        PO4T',
     *'        RPON        LPON         DON         NH4         NO3',
     *'          SU          SA         COD          O2         TAM',
     *'         FCB')
!
      READ(1,295) ICIFN
      WRITE(2,85)'* FILE FOR INITIAL CONDITIONS             = ', ICIFN
      IF(IWQICI.EQ.1)THEN
!XH        OPEN(UNIT=INWQICI,FILE=ICIFN,STATUS='OLD')
       ELSE IF(IWQICI.EQ.2)THEN
!XH        OPEN(UNIT=INWQRST,FILE=ICIFN,STATUS='OLD')
       ELSE
        IF(ICIFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQICI/ICIFN'
      ENDIF
!
!      READ(1,295) OBCFN
!      WRITE(2,85)'* FILE FOR DOWNRIVER BOUNDARY CONDITIONS  = ', OBCFN
!      IF(IWQOBC.EQ.1)THEN
!        OPEN(UNIT=INWQOBC,FILE=OBCFN,STATUS='OLD')
!       ELSE
!        IF(OBCFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQOBC/OBCFN'
!      ENDIF
!
      READ(1,295) AGRFN
      WRITE(2,85)'* FILE FOR ALGAL GROWTH, RESP., PREDATAT. = ', AGRFN
      IF(IWQAGR.EQ.1)THEN
!XH        OPEN(UNIT=INWQAGR,FILE=AGRFN,STATUS='OLD')
       ELSE
        IF(AGRFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQAGR/AGRFN'
      ENDIF
!
      READ(1,295) STLFN
      WRITE(2,85)'* FILE FOR SETTLING RATES OF ALGAE, PART. = ', STLFN
      IF(IWQSTL.EQ.1)THEN
!XH        OPEN(UNIT=INWQSTL,FILE=STLFN,STATUS='OLD')
       ELSE
        IF(STLFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQSTL/STLFN'
      ENDIF
!
      READ(1,295) SUNFN
      WRITE(2,85)'* FILE FOR IO, FD, TE, KT                 = ', SUNFN
      IF(IWQSUN.EQ.1)THEN
!XH        OPEN(UNIT=INWQSUN,FILE=SUNFN,STATUS='OLD')
       ELSE
        IF(SUNFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQSUN/SUNFN'
      ENDIF
!
      READ(1,295) BENFN
      WRITE(2,85)'* FILE FOR BENTHIC FLUX                   = ', BENFN
      IF(IWQBEN.EQ.2)THEN
!XH        OPEN(UNIT=INWQBEN,FILE=BENFN,STATUS='OLD')
       ELSE
        IF(BENFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQBEN/BENFN'
      ENDIF
!
      READ(1,295) PSLFN
      WRITE(2,85)'* FILE FOR POINT SOURCE INPUT             = ', PSLFN
!11_24      IF(IWQPSL.EQ.1)THEN
!XH        OPEN(UNIT=INWQPSL,FILE=PSLFN,STATUS='OLD')
!11_24       ELSE
!11_24        IF(PSLFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQPSL/PSLFN'
!11_24      ENDIF
!
      READ(1,295) NPLFN
      WRITE(2,85)'* FILE FOR NPS INPUT INCLUDING ATM. INPUT = ', NPLFN
      IF(IWQNPL.EQ.1)THEN
!XH        OPEN(UNIT=INWQNPL,FILE=NPLFN,STATUS='OLD')
       ELSE
        IF(NPLFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQNPL/NPLFN'
      ENDIF
!
      READ(1,295) NCOFN
      WRITE(2,85)'* DIAGNOSTIC FILE FOR NEGATIVE CONCENTRAT = ', NCOFN
!
      CLOSE(1)
!      WRITE(6,6666)'READ WQ3DWC.INP'
!

!   HNR   2011 add color light extinction with color as dye             !hnr 4/2011
!         here the dye light extinction coefficient is set              !hnr 4/2011
      wqkedye=0.0                                                       !hnr 4/2011
      OPEN(1,FILE='dyecoefficient.inp',iostat=ios,STATUS='old')         !hnr 4/2011
      IF(ios.eq.0) then                                                 !hnr 4/2011
       read(1,*)                                                        !hnr 4/2011
       read(1,*)                                                        !hnr 4/2011
       read(1,*)wqkedye                                                 !hnr 4/2011
       end if                                                           !hnr 4/2011
       close(1)                                                         !hnr 4/2011

      IF(IWQNC.EQ.1)THEN
        OPEN(1,FILE=NCOFN,STATUS='UNKNOWN')
        CLOSE(1,STATUS='DELETE')
        OPEN(1,FILE=NCOFN,STATUS='UNKNOWN')
!XH        OPEN(UNIT=IWQONC,FILE=NCOFN)
        WRITE(1,284)'* NEGATIVE CONCENTRATION OCCURS:'
        CLOSE(1)
       ELSE
        IF(NCOFN(1:4).NE.'NONE') STOP 'ERROR!! INVALID IWQNC/NCOFN'
      ENDIF
!
  294 FORMAT(2I4,2I3, 7F8.3, /, 14X, 7F8.3, /, 14X, 8F8.3)
  295 FORMAT(44X, A50)
   96 FORMAT(2I5, 13I5, /, 10X, 8I5)
  969 FORMAT(2I4,1X,21I3)
  970 FORMAT(1X,21I3)
   97 FORMAT(2I4, 6F8.3, /, 8X, 7F8.3, /, 8X, 8F8.3)
   98 FORMAT(6F8.4, /, 7F8.4, /, 8F8.4)
   99 FORMAT(7F8.4, /, 7F8.4, /, 8F8.4)
! MRM  21 FORMAT(A27, 4(F8.3,2X))
   21 FORMAT(A27, 1P, 4E11.3)
! MRM  981 FORMAT(A27, F8.3,2X,F8.2,2X,F8.2)
  981 FORMAT(A27, 1P, 3E11.3)
   23 FORMAT(A46, I5)
   85 FORMAT(A44, A50)
  284 FORMAT(A32, /, 'NAME    ITNWQ    L    I    J    K       CONC')
!
! MRM READ FILE KINETICS.INP FOR SPATIALLY-VARYING KINETICS PARAMETERS:
!
      DO I=1,IWQZ
        IWQKA(I)=IWQKA(1)
        WQKRO(I)=WQKRO(1)
! ERROR       WQKTR(I)=WQKRO(1)
        WQKTR(I)=WQKTR(1)
        REAC(I)=REAC(1)
        WQKDC(I)=WQKDC(1)
        WQKDCALM(I)=WQKDCALM(1)
        WQKHRM(I)=WQKHRM(1)
        WQDOPM(I)=WQDOPM(1)
        WQKCD(I)=WQKCD(1)
        WQKHCOD(I)=WQKHCOD(1)
      ENDDO
      IF(IWQZ .GT. 1 .AND. IWQKIN .GT. 0)THEN
        OPEN(1,FILE='KINETICS.INP',STATUS='UNKNOWN')
        CALL SKIPCOMM(1,CCMRM)
        WRITE(2,*) ' '
        WRITE(2,*) ' SPATIALLY-VARYING KINETICS.INP FILE'
        WRITE(2,9111)
        DO I=1,IWQZ
          READ(1,*) IZ, IWQKA(IZ), WQKRO(IZ), WQKTR(IZ), REAC(IZ),
     +     WQKDC(IZ), WQKDCALM(IZ), WQKHRM(IZ), WQDOPM(IZ), WQKCD(IZ),
     +     WQKHCOD(IZ)
          WRITE(2,*) IZ, IWQKA(IZ), WQKRO(IZ), WQKTR(IZ), REAC(IZ),
     +     WQKDC(IZ), WQKDCALM(IZ), WQKHRM(IZ), WQDOPM(IZ), WQKCD(IZ),
     +     WQKHCOD(IZ)
          WRITE(2,9112) IZ, IWQKA(IZ), WQKRO(IZ), WQKTR(IZ), REAC(IZ),
     +     WQKDC(IZ), WQKDCALM(IZ), WQKHRM(IZ), WQDOPM(IZ), WQKCD(IZ),
     +     WQKHCOD(IZ)
        ENDDO
        CLOSE(1)
      ENDIF
9111  FORMAT(/,'ZONE IWQKA   KRO   KTR  REAC   KDC KDCALGM  KHRM',
     + ' DOPTM   KCD KHCOD')
9112  FORMAT(I4, I6, 4F6.3, F8.3, 4F6.3)
!
! SET UP LOOK-UP TABLE FOR TEMPERATURE DEPENDENCY OVER -15OC TO 40OC
!
      DO M=1,NWQTD
!        WTEMP =1.00*REAL(M-1)*0.5 - 4.95
        WTEMP =1.00*REAL(M-1)*0.1 - 14.95
        TT20 = WTEMP-20.0
        DO I=1,IWQZ
          WQKCOD(M,I) = WQKCD(I) * EXP( WQKTCOD*(WTEMP-WQTRCOD) )
          WQTDKR(M,I) = WQKTR(I)**TT20
            WRITE(2,2223)M,I,WQKTR(I),WQTDKR(M,I)
        ENDDO
      ENDDO
  
!
! READ IN MAPPING INFORMATION FOR SPATIALLY-VARYING PARAMETERS (UNIT #7).
!
      DO K=1,KC
       DO L=2,LA
        IWQZMAP(L,K)=1
       ENDDO
      ENDDO
!
! MRM REMOVED THE FOLLOWING HARDWIRE SO WQWCMAP.INP WILL BE READ WHENEVER
!     IWQZ IS GREATER THAN 1 WHICH IMPLIES THE MAP FILE MUST BE READ IN:
!      IF(ISWQCMAP.EQ.1)THEN
      IF(IWQZ .GT. 1)THEN
!
       OPEN(1,FILE='WQWCMAP.INP',STATUS='UNKNOWN')
!
       WRITE(2,999)
       READ(1,30) (TITLE(M), M=1,3)
       WRITE(2,30) (TITLE(M), M=1,3)
!      READ(1,999)
       READ(1,999)
       WRITE(2,999)
       WRITE(2,32)
       IN=0
       IJKC=IC*JC*KC
       DO M=1,IJKC
        READ(1,*,END=1111) I,J,K,IWQZX
        IN=IN+1
        IF(IJCT(I,J).LT.1 .OR. IJCT(I,J).GT.8)THEN
          PRINT*, 'I, J, K, IJCT(I,J) = ', I,J,K,IJCT(I,J)
          STOP 'ERROR!! INVALID (I,J) IN FILE WQWCMAP.INP'
        ENDIF
        L = LIJ(I,J)
        IWQZMAP(L,K)=IWQZX
        WRITE(2,31) L,I,J,K,IWQZMAP(L,K)
       ENDDO
 1111  CONTINUE
       IF(IN.NE.(LA-1)*KC)THEN
        PRINT*, 'ALL ACTIVE WATER CELLS SHOULD BE MAPPED FOR WQ PAR.'
        STOP 'ERROR!! NUMBER OF LINES IN FILE WQWCMAP.INP =\ (LA-1)'
       ENDIF
!
       CLOSE(1)
!
      ENDIF
!      WRITE(6,6666)'READ WQWCMAP.INP'
!
! MRM CODE BELOW ADDED BY M. MORTON 03/29/98:
! READ IN MAPPING INFORMATION FOR SPATIALLY-VARYING BENTHIC FLUXES.
! FORMULATED FOR PECONIC BAY DATA WHICH INCLUDES %MUD FOR EACH CELL AS
! WELL AS MAPPING TO BOTH MUD AND SAND FLUXES.  SUBROUTINE RWQBEN2
! CONTAINS THE CODE TO INTERPOLATE THE FINAL FLUX FOR THE CELL BASED
! ON THE PERCENT MUD AND THE MUD/SAND FLUXES.
!
      IF(IWQBEN .EQ. 2)THEN
!
       DO K=1,2
        DO L=2,LA
         IBENMAP(L,K)=1
         XBENMUD(L) = 0.50
        ENDDO
       ENDDO
!
       OPEN(1,FILE='WQBENMAP.INP',STATUS='UNKNOWN')
!
       WRITE(2,999)
       DO M=1,4
        READ(1,30) TITLE(M)
        WRITE(2,30) TITLE(M)
       ENDDO
!
! SKIP ALL COMMENT CARDS AT BEGINNING OF FILE:
!
       REWIND(1)
       CCMRM = '#'
       CALL SKIPCOMM(1, CCMRM)
!       READ(1,999)
       WRITE(2,999)
       WRITE(2,33)
       IN=0
       IJKC=IC*JC
       DO M=1,IJKC
         READ(1,*,END=1112) I, J, XMUD, IZMUD, IZSAND
         IN=IN+1
         IF(IJCT(I,J).LT.1 .OR. IJCT(I,J).GT.8)THEN
           PRINT*, 'I, J, K, IJCT(I,J) = ', I,J,IJCT(I,J)
           STOP 'ERROR!! INVALID (I,J) IN FILE WQBENMAP.INP'
         ENDIF
         L = LIJ(I,J)
         IBENMAP(L,1) = IZMUD
         IBENMAP(L,2) = IZSAND
         XBENMUD(L) = XMUD / 100.0
         WRITE(2,34) L, I, J, XBENMUD(L), IBENMAP(L,1), IBENMAP(L,2)
       ENDDO
 1112  CONTINUE
       IF(IN .NE. (LA-1))THEN
         PRINT*, 'ALL ACTIVE WATER CELLS SHOULD BE MAPPED FOR WQ PAR.'
         STOP 'ERROR!! NUMBER OF LINES IN FILE WQBENMAP.INP <> (LA-1)'
       ENDIF
!
       CLOSE(1)
!
      ENDIF
!      WRITE(6,6666)'READ WQBENMAP.INP'
!
!MRM CODE ABOVE TO PREVIOUS CMRM ADDED BY M. MORTON 03/29/98.
      CLOSE(2)
!
 2222 FORMAT(' M,WQKTR(1),WQTDKR(M,1) = ',I5,2F10.4)
 2223 FORMAT(' M,I,WQKTR(1),WQTDKR(M,I) = ',2I5,2F10.4)
   30 FORMAT(A79)
   31 FORMAT(15I5)
   32 FORMAT('    L    I    J    L IWQZMAP')
   33 FORMAT('     L    I    J   MUD IZMUD IZSAND')
   34 FORMAT(' ',3I5, F6.2, 2I6)
!
      RETURN
      END